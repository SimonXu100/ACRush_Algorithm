// definition for a binary tree node
 public class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int x) {
      val = x;
    }
  }

// recursive
/**class Solution {
    public int maxDepth(TreeNode root) {
       return maxDepth2(root); 
    }
    public int maxDepth2(TreeNode node){
        int leftDepth = 0;
        int rightDepth = 0;
        if(node == null){
           return 0;
        }
        //leftDepth = maxDepth2(node.left) + 1 ;
        //rightDepth = maxDepth2(node.right) + 1;
        //return Math.max(leftDepth,rightDepth);
        // or 
        leftDepth = maxDepth2(node.left);
        rightDepth = maxDepth2(node.right);
        return Math.max(leftDepth,rightDepth)+1;
    }
}
*/

// iterative: bfs: 队列
  public int maxDepth(TreeNode root){
        
        if(root==null) return 0;
        
        int depth = 0;
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        queue.offer(root);
        while( !queue.isEmpty() ){
            depth++;
            int size = queue.size();//注意，这里必须先拿到size!(size是上一层的node个数)
            for(int i = 0; i < size; i++){
                TreeNode node = queue.poll();
                if(node.left != null)
                    queue.offer(node.left);
                if(node.right != null)
                    queue.offer(node.right);
            }
        }
        
        return depth;
    }

// iterative: dfs: 栈：仅仅参考
//iterative dfs
    public int maxDepth(TreeNode root) {
        if(root == null) {
            return 0;
        }

        Stack<TreeNode> stack = new Stack<>();
        Stack<Integer> value = new Stack<>();
        stack.push(root);
        value.push(1);
        int depth = 0;
        while(!stack.isEmpty()) {
            TreeNode node = stack.pop();
            int temp = value.pop();
            depth = Math.max(temp, depth);
            if(node.left != null) {
                stack.push(node.left);
                value.push(temp+1);
            }
            if(node.right != null) {
                stack.push(node.right);
                value.push(temp+1);
            }
        }
        return depth;
    }

  // bfs: 队列 ： 仅仅参考

  class Solution {
  public int maxDepth(TreeNode root) {
    Queue<Pair<TreeNode, Integer>> stack = new LinkedList<>();
    if (root != null) {
      stack.add(new Pair(root, 1));
    }

    int depth = 0;
    while (!stack.isEmpty()) {
      Pair<TreeNode, Integer> current = stack.poll();
      root = current.getKey();
      int current_depth = current.getValue();
      if (root != null) {
        depth = Math.max(depth, current_depth);
        stack.add(new Pair(root.left, current_depth + 1));
        stack.add(new Pair(root.right, current_depth + 1));
      }
    }
    return depth;
  }
};



重点
// iteration
// bfs: queue

class Solution {
    public int maxDepth(TreeNode root) {
      Queue<Pair<TreeNode,Integer>> queue = new LinkedList<>();
      if(root != null){
          queue.offer(new Pair(root,1));
      }
      int depth = 0;
      while(!queue.isEmpty()){
         Pair<TreeNode,Integer> current = queue.poll();
         root = current.getKey();
         int current_depth = current.getValue();
         if(root != null){
             depth = Math.max(depth,current_depth);
             queue.add(new Pair(root.left,current_depth+1));
             queue.add(new Pair(root.right,current_depth+1));
         }      
      }
     return depth;
    }
}













