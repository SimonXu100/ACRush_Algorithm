// 状态转换方程
// 分析：O（n）时间：O（n）
//dp(n) = max(dp(n-1),dp(n-2)+num);
class Solution {
    public int rob(int[] nums) {
      int[] dp = new int[nums.length+1];
      if(nums.length == 0){return 0;}
      dp[0] = 0;
      dp[1] = nums[0];
      for(int i = 2; i< nums.length+1; i++){
          dp[i] = Math.max(dp[i-1],dp[i-2]+nums[i-1]);
      }
      return dp[nums.length];
    }
}

// 动态编程 
// 分析：O（N）
// 时间：0（1）
class Solution {
    public int rob(int[] nums) {
      if(nums.length == 0){return 0;}
      if(nums.length == 1){return nums[0];}
      int ans = 0;
      int prev1 = nums[0];
      int prev2 = 0;
      for(int i = 1; i< nums.length; i++){
        ans = Math.max(prev1,prev2+nums[i]);
        prev2 = prev1; 
        prev1 = ans;
      }
       return ans;
      //return prev1;
    }
}


